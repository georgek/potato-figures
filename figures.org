#+TITLE: Figures for potato paper
#+DATE: <2017-02-11 Sat>
#+AUTHOR: George Kettleborough
#+EMAIL: george.kettleborough@earlham.ac.uk
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t c:nil
#+OPTIONS: creator:comment d:(not "LOGBOOK") date:t e:t email:nil f:t
#+OPTIONS: inline:t num:t p:nil pri:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t toc:t todo:t |:t
#+CREATOR: Emacs 25.1.2 (Org mode 8.2.10)
#+DESCRIPTION:
#+EXCLUDE_TAGS: noexport
#+KEYWORDS:
#+LANGUAGE: en
#+SELECT_TAGS: export

#+OPTIONS: html-link-use-abs-url:nil html-postamble:auto html-preamble:t
#+OPTIONS: html-scripts:t html-style:t html5-fancy:nil tex:t
#+CREATOR: <a href="http://www.gnu.org/software/emacs/">Emacs</a> 25.1.1 (<a href="http://orgmode.org">Org</a> mode 8.2.10)
#+HTML_CONTAINER: div
#+HTML_DOCTYPE: xhtml-strict
#+HTML_HEAD: <link href="css/bootstrap.min.css" rel="stylesheet">
#+HTML_HEAD: <link href="css/syntax.css" rel="stylesheet">
#+HTML_HEAD: <script src="js/jquery.js"></script>
#+HTML_HEAD: <script src="js/bootstrap.min.js"></script>
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+INFOJS_OPT:
#+LATEX_HEADER:

* Introduction

This document contains all of the code needed to generate the figures for the
potato paper from the raw data. It can be executed with org-mode to generate
the figures automatically. The following org-mode settings are required:
#+BEGIN_SRC elisp :exports code
  ;;; use bash to evaluate shell code
  (setq org-babel-sh-command "bash")

  ;;; export with CSS classes instead of explicit colours
  ;;; this uses the included CSS for syntax highlighting
  ;;; instead of your own emacs colours
  (setq org-html-htmlize-output-type 'css)
  (setq org-html-htmlize-font-prefix "org-")
  ;;; the same but with bootstrap export, requires `ox-twbs'
  (setq org-twbs-htmlize-output-type 'css)
  (setq org-twbs-htmlize-font-prefix "org-")
#+END_SRC

The code in this document will read input data from the =data= directory, make
intermediate files in an =output= directory, and put the final figures in a
=figures= directory.

#+BEGIN_SRC sh :results output silent :exports code
  #!/bin/bash
  mkdir -p output figures
#+END_SRC

* Cumulative content

These plots show the cumulative content of the assemblies as successively
smaller contigs are added in. The table gives the names of the assemblies and
the filenames we use for each. Much of the code in this section uses this
table. It is read into the code blocks line by line into the name and filename
variables.

#+tblname: filenames
| name                         | filename             |
|------------------------------+----------------------|
| Supernova + BioNano          | 10x-bn               |
| Supernova                    | 10x                  |
| Discovar                     | discovar-contig      |
| Discovar + MP + DT + BioNano | discovar-mp-dt-bn    |
| Discovar + MP + Dovetail     | discovar-mp-dt       |
| Discovar + MP + DT + PBJelly | discovar-mp-dt-jelly |
| Discovar + MP + BioNano      | discovar-mp-bn       |
| Discovar + MP                | discovar-mp          |
| Falcon + BioNano             | falcon-bn            |
| Falcon + DT + BioNano        | falcon-dt-bn         |
| Falcon + Dovetail            | falcon-dt            |
| Falcon                       | falcon               |

** Code

First we calculate the lengths of the contigs/scaffolds in each assembly and
sort in descending order of size.

#+BEGIN_SRC sh :results output silent :exports code :var table=filenames :separator ,
  #!/bin/bash
  IFS=','
  while read name filename; do
      if [[ ! -s output/${filename}.length ]]; then
          echo "Calculating lengths of ${filename}..."
          gzip -cd data/${filename}.fasta.gz \
              | awk '
                    /^>/ {
                      if (len) {
                        print len, name
                      }
                      split($0,s," ")
                      name=substr(s[1],2)
                      len=0
                      next
                    }
                    {
                      len += length($0)
                    } 
                    END {
                      if (len) {
                        print len, name
                      }
                    }
                    ' \
                        | sort -nr -k1,1 \
                               > output/${filename}.length
      fi
  done <<< "$table"
#+END_SRC

Now we calculate the data for the plot. The minimum length of contigs
considered and the total length of all contigs of that size or bigger.

#+BEGIN_SRC sh :results output silent :exports code :var table=filenames :separator ,
  #!/bin/bash
  IFS=','
  while read name filename; do
      if [[ ! -s output/${filename}.minlen-cumulative ]]; then
          echo "Calculating cumulative lengths of ${filename}..."
          awk '
              BEGIN {
                OFS="\t"
                last = 0
                sum = 0
              } 
              {
                if($1 != last && last != 0) {
                  print last, sum
                }
                last = $1
                sum += $1
              }
              ' \
                  output/${filename}.length \
                  > output/${filename}.minlen-cumulative
      fi
  done <<< "$table"
#+END_SRC

Now we prepare the table for ggplot by concatenating the =minlen-cumulative=
tables and putting the name of the assembly in the third column.

#+BEGIN_SRC sh :results output silent :exports code :var table=filenames :separator ,
  #!/bin/bash
  IFS=','
  while read name filename; do
      awk -v OFS=',' -v fname="$filename" -v name="$name" \
          '
          {
            print $1,$2,fname,name
          }
          ' \
              output/${filename}.minlen-cumulative
  done <<< "$table" \
       > output/all-assemblies.minlen-cumulative
#+END_SRC

Now we can plot these lines using ggplot:

#+INCLUDE: "cumulative-content.R" src R

Make PDF versions:

#+BEGIN_SRC R :results output silent :exports code
  source(file="cumulative-content.R")

  pdf(file="figures/bigcompplot.pdf", width=5, height=5)
  print(bigcompplot)
  dev.off()

  pdf(file="figures/dvcompplot.pdf", width=5, height=5)
  print(dvcompplot)
  dev.off()

  pdf(file="figures/pbcompplot.pdf", width=5, height=5)
  print(pbcompplot)
  dev.off()

  pdf(file="figures/all.pdf", width=15, height=5)
  grid.draw(cbind(ggplotGrob(bigcompplot),
                  ggplotGrob(dvcompplot),
                  ggplotGrob(pbcompplot),
                  size="last"))
  dev.off()
#+END_SRC

** Plots

#+BEGIN_SRC R :results output graphics :file figures/bigcompplot.png :width 500 :height 500 :exports results :cache yes
  source(file="cumulative-content.R")
  print(bigcompplot)
#+END_SRC

#+RESULTS[f009dcf707ee2ca01361b8d13cb6cab67ede2e1a]:
[[file:figures/bigcompplot.png]]

#+BEGIN_SRC R :results output graphics :file figures/dvcompplot.png :width 500 :height 500 :exports results :cache yes
  source(file="cumulative-content.R")
  print(dvcompplotwaxis)
#+END_SRC

#+RESULTS[aa1a6cf66be8279fe82bbabf45d2683693d7832b]:
[[file:figures/dvcompplot.png]]

#+BEGIN_SRC R :results output graphics :file figures/pbcompplot.png :width 500 :height 500 :exports results :cache yes
  source(file="cumulative-content.R")
  print(pbcompplotwaxis)
#+END_SRC

#+RESULTS[7596061d4673f3c8a66b958e046b4692fe0a439d]:
[[file:figures/pbcompplot.png]]

* KAT plots
** Code

For the KAT plots we have to count k-mers in the Discovar library reads and
the assemblies. The read files =LIB12786_R1.fastq= and =LIB12786_R2.fastq=
need to be in the =data= directory to run KAT as below. This generates three
matrix files with filenames ending in =-main.mx=. KAT takes a long time and a
lot of memory to run so we provide these matrix files.

#+BEGIN_SRC sh :exports code
  for asm in discovar-contig falcon-pilon 10x; do
      kat comp -t 8 -o data/kat-comp-${asm} \
          'data/LIB12786_R?.fastq' \
          data/${asm}.fasta
  done
#+END_SRC  

KAT comes with its own plotting tools using Python and matplotlib, but we use
the ggplot version to match the other figures in the paper.

#+INCLUDE: "plot-comp.R" src R

Make PDF versions:

#+BEGIN_SRC R :results output silent :exports code
  commandArgs <- function() c("data/kat-comp-discovar-contig-main.mx",
                   "200", "0", "5", "PCR free", "Discovar")
  source(file="plot-comp.R")

  pdf(file="figures/kat-comp-discovar.pdf", width=5, height=4, onefile=TRUE)
  print(p)
  dev.off()

  commandArgs <- function() c("data/kat-comp-falcon-pilon-main.mx",
                   "200", "0", "5", "PCR free", "Falcon")
  source(file="plot-comp.R")

  pdf(file="figures/kat-comp-falcon.pdf", width=5, height=4, onefile=TRUE)
  print(p)
  dev.off()

  commandArgs <- function() c("data/kat-comp-10x-main.mx",
                   "200", "0", "5", "PCR free", "Supernova")
  source(file="plot-comp.R")

  pdf(file="figures/kat-comp-10x.pdf", width=5, height=4, onefile=TRUE)
  print(p)
  dev.off()
#+END_SRC

** Figures

The PNG output from R does not look very good for some reason.

#+BEGIN_SRC R :results output graphics :file figures/kat-comp-discovar.png :width 500 :height 400 :exports results :cache yes
  commandArgs <- function() c("data/kat-comp-discovar-contig-main.mx",
                              "200", "0", "5", "PCR free", "Discovar")
  source(file="plot-comp.R")
  print(p)
#+END_SRC

#+RESULTS[32137840f717255b2f052518ecf515d519ff97e8]:
[[file:figures/kat-comp-discovar.png]]

#+BEGIN_SRC R :results output graphics :file figures/kat-comp-falcon.png :width 500 :height 400 :exports results :cache yes
  commandArgs <- function() c("data/kat-comp-falcon-pilon-main.mx",
                              "200", "0", "5", "PCR free", "Falcon")
  source(file="plot-comp.R")
  print(p)
#+END_SRC

#+RESULTS[c9d7b7e74d0350603766dedd8e8e153404a12e7e]:
[[file:figures/kat-comp-falcon.png]]

#+BEGIN_SRC R :results output graphics :file figures/kat-comp-10x.png :width 500 :height 400 :exports results :cache yes
  commandArgs <- function() c("data/kat-comp-10x-main.mx",
                              "200", "0", "5", "PCR free", "Supernova")
  source(file="plot-comp.R")
  print(p)
#+END_SRC

#+RESULTS[6fdd7bd42b7f97cbd98fc31141e539780593c990]:
[[file:figures/kat-comp-10x.png]]

* BAC with difficult region

For the BAC plot we use a PacBio assembly of a BAC (labelled number 22). We
have several tracks of data: three contig alignments, three read alignments,
and a GC content and homopolymer track. The PacBio assembly of BAC 22 is
contained in =bac22.fasta=.

** Contig alignment

For the contig alignments we use bwa-mem.

#+tblname: bac-contig-files
| name      | filename        |
|-----------+-----------------|
| Supernova | 10x             |
| Discovar  | discovar-contig |
| Falcon    | falcon          |

#+BEGIN_SRC sh :results output silent :exports code :var table=bac-contig-files :separator ,
  #!/bin/bash
  bwa index data/bac22.fasta
  IFS=','
  while read name filename; do
      bwa mem data/bac22.fasta data/${filename}.fasta \
          | samtools view -b - > data/pb-${filename}.bam
      sambamba sort data/pb-${filename}.bam
  done <<< "$table"
#+END_SRC

The =sam-to-R.py= script takes multiple SAM input files and outputs a table
for plotting with ggplot. Optional parameters are =-m= for minimum length of
the alignment and =-i= for minimum percent identity, both of which are
calculated from the CIGAR string for each alignment in the SAM file. The first
positional parameter provides a short name for each of the following
alignments, which is embedded in the table, and then the alignment files
follow. We use process substitution so we can use BAM files, ensuring that the
SAM header is present by using the =-h= flag for samtools view.

#+INCLUDE: "sam-to-R.py" src python

To generate the table for our three contig tracks we run:

#+BEGIN_SRC sh :results output silent :exports code
  #!/bin/bash
  python sam-to-R.py \
         -m 1000 -i 99.9 dv,fal,10x \
         <(samtools view -h data/pb-discovar-contig.sorted.bam) \
         <(samtools view -h data/pb-falcon.sorted.bam) \
         <(samtools view -h data/pb-10x.sorted.bam) \
         > output/pb-r-table
#+END_SRC

** Read alignment

For the read alignment we use bowtie2. The =ord= variable tells the aligner if
the reads are in forward-reverse or reverse-forward order.

#+tblname: bac-read-files
| name      | filename | ord |
|-----------+----------+-----|
| Discovar  | discovar | fr  |
| Mate pair | mp       | rf  |
| Dovetail  | dovetail | fr  |

We align each set of reads and suppress the unaligned reads to keep the file
size smaller. Then they are filtered for reads with a high mapping quality and
an edit distance with respect to the reference of no more than 1.

#+BEGIN_SRC sh :results output silent :exports code :var table=bac-contig-files :separator ,
  #!/bin/bash
  bowtie2-build data/bac22.fasta data/bac22
  IFS=','
  while read name filename ord; do
      bowtie2 -p 8 --no-unal --${ord} -x data/bac22 \
              -1 data/${filename}-R1.fastq -2 data/${filename}-R2.fastq \
          | samtools view -b - > data/${filename}-aln.bam
      sambamba view -f bam -F "mapping_quality >= 30 and [NM] <= 1" \
               data/${filename}-aln.bam \
               > data/${filename}-aln-acc.bam
  done <<< "$table"
#+END_SRC

For the paired-end (Discovar) we simply generate the depth at each reference
position.

#+BEGIN_SRC sh :results output silent :exports code
  #!/bin/bash

  sambamba sort data/discovar-aln-acc.bam
  samtools depth -a data/discovar-aln-acc.sorted.bam \
           > output/discovar-aln-acc.cov
#+END_SRC

For the mate pair and Dovetail we calculate the coverage the aligned
fragments. First we need to sort the alignments by name to bring the pairs
together:

#+BEGIN_SRC sh :results output silent :exports code
  #!/bin/bash
  for filename in mp dovetail; do
      samtools sort -n -O bam -T data/${filename}-aln-acc.sorted.name.bam \
               <(samtools view -bh -F 1804 -q 1 data/${filename}-aln-acc.bam) \
               > data/${filename}-aln.sorted.name.bam
  done
#+END_SRC

Now we use bedtools to make a =bed= file with the physical fragments:

#+BEGIN_SRC sh :results output silent :exports code
  #!/bin/bash
  for filename in mp dovetail; do
      bamToBed -i data/${filename}-aln.sorted.name.bam -bedpe \
          | cut -f 1,2,6 | sort -k1,1 > output/${filename}.phys.bed
  done
#+END_SRC

And finally calculate the coverage at each reference position:

#+BEGIN_SRC sh :results output silent :exports code
  #!/bin/bash
  for filename in mp dovetail; do
      bedtools genomecov -d -i output/${filename}.phys.bed \
               -g data/bac22.fasta.fai > output/${filename}.phys.cov
  done
#+END_SRC

** GC content and homopolymers

For the GC content we use bedtools. We make 100bp windows and calculate the GC
content in the windows.

#+BEGIN_SRC sh :results output silent :exports code
  #!/bin/bash

  bedtools makewindows -g data/bac22.fasta.fai -w 100 \
           > output/bac22.100bps.bed
  bedtools nuc -fi data/bac22.fasta -bed output/bac22.100bps.bed \
           > output/bac22.gc.txt
  awk -v w=100 -vOFS='\t' -vFS='\t' 'NR > 1 {print $1,($2+$3)/2,$5}' \
      output/bac22.gc.txt \
      > output/bac22.gc.100bps
#+END_SRC

The homopolymers are calculated using the following python script:

#+INCLUDE: "homopolymers.py" src python

#+BEGIN_SRC sh :results output silent :exports code
  #!/bin/bash
  python ~/code/tools/homopolymers.py data/bac22.fasta 4 \
         > output/bac22.homopolymers.4
#+END_SRC

** Figure

Finally, after generating the data we can plot it all using ggplot.

#+INCLUDE: "bac-graphs2.R" src R

#+BEGIN_SRC sh :results output silent :exports code
  #!/bin/bash
  ./bac-graphs2.R \
      bac22 \
      figures/bac22-pacbio \
      output/discovar-aln-acc.cov \
      output/mp.phys.cov \
      output/dovetail.phys.cov \
      output/bac22.gc.100bps \
      output/bac22.homopolymers.4 \
      output/pb-r-table \
      10x,fal,dv
#+END_SRC

[[file:figures/bac22-pacbio.png]]

* Gene content

#+BEGIN_SRC R :exports code
  #!/usr/bin/env Rscript

  library("ggplot2")
  library("reshape2")
  library("grid")

  t <- read.table("../genes-table", header=TRUE)
  tm <- melt(t, id.vars="asm", variable.name="type", value.name="genes")

  p <- ggplot(tm, aes(x=asm, y=genes, fill=type)) +
      scale_fill_discrete(name="Type",
                        labels=c("cegcom"="Cegma complete",
                            "cegpar"="Cegma partial",
                            "buscom"="Busco complete",
                            "buspar"="Busco partial",
                            "busmis"="Busco missing")) +
      scale_x_discrete(name="Assembly") +
      scale_y_continuous(name="Number of genes") +
      geom_bar(stat="identity", position="dodge") +
      geom_bar(stat="identity", position="dodge", colour="black", show_guide=FALSE) +
      theme(legend.position="bottom", legend.key.size=unit(3, "mm"),
            legend.text=element_text(size=8),legend.title=element_text(size=8),
            plot.margin=unit(c(2,2,0,0), "mm")) +
      guides(fill=guide_legend(nrow=2,byrow=TRUE))

  pdf(file="genes-bar.pdf", width=4, height=4)
  print(p)
  dev.off()
#+END_SRC

* Synteny to /S. tuberosum/

** Code

We generate alignments between the /S. tuberosum/ reference and our assemblies
using =nucmer=. We are interesting in our three "large" hybrid assemblies.

#+tblname: synteny-names
| name                         | filename          |
|------------------------------+-------------------|
| Supernova + BioNano          | 10x-bn            |
| Discovar + MP + DT + BioNano | discovar-mp-dt-bn |
| Falcon + DT + BioNano        | falcon-dt-bn-2    |

The file =falcon-dt-bn-2= is generated by replacing the pipe symbols in the
fasta file with underscores because some or all of mummer's scripts do not
support the pipe symbol.

#+BEGIN_SRC sh
  #!/bin/bash

  gzip -cd data/falcon-dt-bn.fasta.gz \
      | sed 's/|/_/g' > data/falcon-dt-bn-2.fasta
#+END_SRC

The following code requires mummer and the /S. tuberosum/ pseudomolecule
assembly version 4.03 in the =data= directory. It is available here:
[[http://solanaceae.plantbiology.msu.edu/pgsc_download.shtml]]

#+BEGIN_SRC sh :results output silent :exports code :var table=synteny-names :separator ,
  #!/bin/bash
  IFS=','
  while read name filename; do
      nucmer -c 65 -l 65 \
             -p output/${filename} \
             data/PGSC_DM_v4.03_pseudomolecules.fasta \
             data/${filename}.fasta
  done <<< "$table"
#+END_SRC

First we filter the delta to only include alignments of at least 90% identity
and 10kb in length.

#+BEGIN_SRC sh :results output silent :exports code :var i=90 :var l=10000 :var table=synteny-names :separator ,
  #!/bin/bash
  IFS=','
  while read name filename; do
      if [[ ! -s output/${filename}-i${i}-l${l}.delta ]]; then
          echo "Filtering delta..."
          delta-filter -q -r -i ${i} -l ${l} output/${filename}.delta \
                       > output/${filename}-i${i}-l${l}.delta
      fi
  done <<< "$table"
#+END_SRC

Now we generate the coords files which we'll need later to sort and orientate
the scaffolds for each chromosome. By default mummer will plot every scaffold
in the assembly even if we select only one chromosome of the reference,
therefore we need to find which scaffolds actually have alignments with each
reference sequence.

#+BEGIN_SRC sh :results output silent :exports code :var i=90 :var l=10000 :var table=synteny-names :separator ,
  #!/bin/bash
  IFS=','
  while read name filename; do
      if [[ ! -s output/${filename}-i${i}-l${l}.coords ]]; then
          echo "Making coords..."
          show-coords -THrcl output/${filename}-i${i}-l${l}.delta \
                      > output/${filename}-i${i}-l${l}.coords
      fi
  done <<< "$table"
#+END_SRC

Mummer will also require the length of each assembly scaffold that we wish to
plot.

#+BEGIN_SRC sh :results output silent :exports code :var i=90 :var l=10000 :var table=synteny-names :separator ,
  #!/bin/bash
  IFS=','
  while read name filename; do
      if [[ ! -s output/${filename}.length ]]; then
          echo "Calculating lengths of ${filename}..."
          cat data/${filename}.fasta \
              | awk '
                    /^>/ {
                      if (len) {
                        print len, name
                      }
                      split($0,s," ")
                      name=substr(s[1],2)
                      len=0
                      next
                    }
                    {
                      len += length($0)
                    }
                    END {
                      if (len) {
                        print len, name
                      }
                    }
                    ' \
                        | sort -nr -k1,1 \
                               > output/${filename}.length
      fi
  done <<< "$table"
#+END_SRC

Finally we make a mummerplot for each assembly and each chromosome. We are
going to manually select which assembly scaffolds to display and also manually
order and orientate them. =mummerplot= attempts to do the ordering and
orientation itself but doesn't do a very good job. We want to order the
scaffolds such that most of the bases in the alignment appear on the
diagonal. We do this by sorting by the average base position in the alignment
of each scaffold. We want to orientate the scaffolds such that as much as
possible is "forwards" (more red than blue in the plots). We do this by
counting how much of the alignment length is forward and reverse and setting
the orientation accordingly.

#+BEGIN_SRC sh :results output silent :exports code :var i=90 :var l=10000 :var table=synteny-names :separator ,
  #!/bin/bash
  IFS=','
  while read name filename; do
      for chr in {01..12}; do
          echo "Doing chr ${chr}..."

          # find scaffold order and orientation
          awk '$12 == "ST4.03ch'${chr}'" {print $1,$2,$3,$4,$13;}' \
              output/${filename}-i${i}-l${l}.coords \
              | sort -n -k1,1 \
              | sort -s -k5 \
              | awk '
  BEGIN {
     lastn=""; lastm=0; lastb=0; lastl=0;
  }
  {
     n=$5; s=$1; e=$2; p=(s+e)/2; b=e-s; l=$4-$3;
     if (lastn=="") {
        lastn=n; lastm=p; lastb=b; lastl=l;
     } else if (lastn!=n) {
        print lastn,int(lastm),lastl
        lastn=n; lastm=p; lastb=b; lastl=l;
     } else {
        lastm=(lastm*lastb+p*b)/(lastb+b); lastb+=b; lastl+=l
     }
  }
  END {
     print lastn,int(lastm),lastl
  }
  ' \
              | sort -k1,1 \
                     > output/${filename}-chr${chr}-contigs-i${i}-l${l}.scaf-pos-orn

          join -1 1 -2 2 \
               output/${filename}-chr${chr}-contigs-i${i}-l${l}.scaf-pos-orn \
               <(sort -k2,2 output/${filename}.length) \
              | sort -n -k2,2 \
              | awk '{if ($3>0) {sign="+"} else {sign="-"} printf "%s\t%d\t%s\n", $1, $4, sign;}' \
                    > output/${filename}-chr${chr}-contigs-i${i}-l${l}.mumlist

          mummerplot -t png -r ST4.03ch${chr} \
                     -p output/mummerplot-${filename}-i${i}-l${l}-${chr} \
                     output/${filename}-i${i}-l${l}.delta \
                     -Q output/${filename}-chr${chr}-contigs-i${i}-l${l}.mumlist

          mv output/mummerplot-${filename}-i${i}-l${l}-${chr}.png figures/
      done
  done <<< "$table"
#+END_SRC

** Figures
Here is a quick preview of the figures.

#+BEGIN_SRC sh :results output silent :exports code :var i=90 :var l=10000 :var table=synteny-names :separator ,
  IFS=','
  while read name filename; do
      montage figures/mummerplot-${filename}-i${i}-l${l}-??.png \
              -geometry 240x240+20+10 -tile 3x4 \
              figures/mummerplot-${filename}-i${i}-l${l}-all.png
      echo "*** ${name}"

      echo "[[file:figures/mummerplot-${filename}-i${i}-l${l}-all.png]]"
  done <<< "$table"
#+END_SRC

*** Supernova + BioNano
[[file:figures/mummerplot-10x-bn-i90-l10000-all.png]]
*** Discovar + MP + DT + BioNano
[[file:figures/mummerplot-discovar-mp-dt-bn-i90-l10000-all.png]]
*** Falcon + DT + BioNano
[[file:figures/mummerplot-falcon-dt-bn-2-i90-l10000-all.png]]
